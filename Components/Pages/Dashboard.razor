@page "/dashboard"
@using practice.Models
@inject NavigationManager NavigationManager
@inject UserService UserService

<div class="container-fluid mt-4">
    <h3 class="text-center mb-4">Welcome back, @UserService.loggedInUserName!</h3>

    <div class="row justify-content-center">
        <!-- Credit Box -->
        <div class="col-12 mb-4">
            <div class="card shadow-lg rounded-3 border-light">
                <div class="card-header bg-primary text-white text-center">
                    <h5>Credit Balance</h5>
                </div>
                <div class="card-body text-center">
                    <h5 class="card-title">@UserService.loggedInUserName's Credit Balance</h5>
                    <p class="card-text display-6 text-success fw-bold">@CurrentUser?.Credit</p>
                    <button class="btn btn-outline-primary mt-3" @onclick="ShowInputField">Insert Credit</button>

                    @if (IsInputVisible)
                    {
                        <div class="mt-4">
                            <input type="number" class="form-control mb-2" @bind="NewCredit" placeholder="Enter credit amount">
                            <select class="form-select mb-2" @bind="Tag">
                                <option value="" disabled selected>Select a Tag</option>
                                <option value="Personal">Personal</option>
                                <option value="Business">Business</option>
                                <option value="Loan">Loan</option>
                                <option value="Investment">Investment</option>
                                <option value="Salary">Salary</option>
                                <option value="Miscellaneous">Miscellaneous</option>
                            </select>
                            <input type="text" class="form-control mb-2" @bind="note" placeholder="Remarks">
                            <button class="btn btn-primary" @onclick="SubmitCredit">Insert</button>
                            <button class="btn btn-outline-secondary ms-2" @onclick="HideInputField">Discard</button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="text-danger mt-2">@ErrorMessage</div>
                    }
                </div>
            </div>
        </div>

        <!-- Debit Box -->
        <div class="col-12 mb-4">
            <div class="card shadow-lg rounded-3 border-light">
                <div class="card-header bg-warning text-dark text-center">
                    <h5>Debit Balance</h5>
                </div>
                <div class="card-body text-center">
                    <h5 class="card-title">@UserService.loggedInUserName's Debit Balance</h5>
                    <p class="card-text display-6 text-danger fw-bold">@CurrentUser?.Debit</p>
                    <button class="btn btn-outline-warning mt-3" @onclick="ShowInputFieldDebit">Insert Debit</button>

                    @if (IsInputVisibleDebit)
                    {
                        <div class="mt-4">
                            <input type="number" class="form-control mb-2" @bind="NewDebit" placeholder="Enter debit amount">
                            <select class="form-select mb-2" @bind="Tag">
                                <option value="" disabled selected>Select a Tag</option>
                                <option value="Personal">Personal</option>
                                <option value="Business">Business</option>
                                <option value="Loan">Loan</option>
                                <option value="Investment">Investment</option>
                                <option value="Salary">Salary</option>
                                <option value="Miscellaneous">Miscellaneous</option>
                            </select>
                            <input type="text" class="form-control mb-2" @bind="note" placeholder="Remarks">
                            <button class="btn btn-warning" @onclick="SubmitDebit">Insert</button>
                            <button class="btn btn-outline-secondary ms-2" @onclick="HideInputFieldDebit">Discard</button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(ErrorMessageDebit))
                    {
                        <div class="text-danger mt-2">@ErrorMessageDebit</div>
                    }
                </div>
            </div>
        </div>

        <!-- Debt Box -->
        <div class="col-12 mb-4">
            <div class="card shadow-lg rounded-3 border-light">
                <div class="card-header bg-danger text-white text-center">
                    <h5>Debt Balance</h5>
                </div>
                <div class="card-body text-center">
                    <h5 class="card-title">@UserService.loggedInUserName's Debt Balance</h5>
                    <p class="card-text display-6 text-danger fw-bold">@CurrentUser?.Debt</p>
                    <button class="btn btn-outline-danger btn-sm mt-3" @onclick="ShowInputFieldDept">Insert Debt</button>

                    @if (IsInputVisibleDebt)
                    {
                        <div class="mt-4">
                            <input type="number" class="form-control form-control-sm mb-2" @bind="NewDebt" placeholder="Enter debt amount">
                            <select class="form-select mb-2" @bind="Tag">
                                <option value="" disabled selected>Select a Tag</option>
                                <option value="Personal">Personal</option>
                                <option value="Business">Business</option>
                                <option value="Loan">Loan</option>
                                <option value="Investment">Investment</option>
                                <option value="Salary">Salary</option>
                                <option value="Miscellaneous">Miscellaneous</option>
                            </select>
                            <input type="text" class="form-control mb-2" @bind="note" placeholder="Remarks">
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-primary btn-sm" @onclick="SubmitDebt">Insert</button>
                                <button class="btn btn-secondary btn-sm" @onclick="HideInputFieldDept">Discard</button>
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(ErrorMessageDebt))
                    {
                        <div class="mt-2 text-danger" style="font-size: 0.9rem;">@ErrorMessageDebt</div>
                    }

                    <button class="btn btn-outline-danger btn-sm mt-3 ms-2" @onclick="ClearDebtBalance">Pay Debt</button>
                </div>
            </div>
        </div>
    </div>

    @if (CurrentUser?.Debt > 0)
    {
        <div class="alert alert-warning text-center mt-3">
            <h4 class="fw-bold">You have <span class="text-danger">@CurrentUser.Debt</span> left to clear.</h4>
        </div>
    }
</div>

@code {
    private int NewCredit { get; set; }
    private int NewDebit { get; set; }
    private int NewDebt { get; set; }
    private bool IsInputVisible { get; set; } = false;
    private bool IsInputVisibleDebit { get; set; } = false;
    private bool IsInputVisibleDebt { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string Tag { get; set; } = string.Empty;
    private string note { get; set; } = string.Empty;
    private string ErrorMessageDebit { get; set; } = string.Empty;
    private string ErrorMessageDebt { get; set; } = string.Empty;
    private User? CurrentUser { get; set; }

    protected override void OnInitialized()
    {
        CurrentUser = UserService.GetLoggedInUser();
    }

    private void ShowInputField() => IsInputVisible = true;
    private void ShowInputFieldDebit() => IsInputVisibleDebit = true;
    private void ShowInputFieldDept() => IsInputVisibleDebt = true;
    private void HideInputField() => IsInputVisible = false;
    private void HideInputFieldDebit() => IsInputVisibleDebit = false;
    private void HideInputFieldDept() => IsInputVisibleDebt = false;

    private void SubmitCredit()
    {
        if (NewCredit > 0)
        {
            UserService.UpdateCredit(UserService.loggedInUserName, NewCredit, Tag, note);
            CurrentUser = UserService.GetLoggedInUser();
            NewCredit = 0;
            IsInputVisible = false;
            ErrorMessage = string.Empty;
        }
        else
        {
            ErrorMessage = "Please enter credit amount in integer format and greater than 0.";
        }
    }

    private void SubmitDebit()
    {
        if (NewDebit > 0 && NewDebit <= CurrentUser.Credit)
        {
            UserService.UpdateDebit(UserService.loggedInUserName, NewDebit, Tag, note);
            CurrentUser = UserService.GetLoggedInUser();
            NewDebit = 0;
            IsInputVisibleDebit = false;
            ErrorMessageDebit = string.Empty;
        }
        else
        {
            if(NewDebit > CurrentUser.Credit)
            {
                ErrorMessageDebit = "Your debit can't be greater than your credit";
            }
            else
            {
                ErrorMessageDebit = "Please enter debit amount in integer format and greater than 0.";
            }
        }
    }

    private void SubmitDebt()
    {
        if (NewDebt > 0)
        {
            UserService.UpdateDebt(UserService.loggedInUserName, NewDebt, Tag, note);
            CurrentUser = UserService.GetLoggedInUser();
            NewDebt = 0;
            IsInputVisibleDebt = false;
            ErrorMessageDebit = string.Empty;
        }
        else
        {
            ErrorMessageDebit = "Please enter debt amount in integer format and greater than 0.";
        }
    }

    private void ClearDebtBalance()
    {
        try
        {
            UserService.ClearDebt(UserService.loggedInUserName);
            CurrentUser = UserService.GetLoggedInUser();
            ErrorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
