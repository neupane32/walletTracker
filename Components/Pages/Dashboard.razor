@page "/dashboard"
@using practice.Models
@using System.Globalization
@inject NavigationManager NavigationManager
@inject UserService UserService

<div class="container-fluid mt-4">
    <h3 class="text-center mb-4">Welcome back, @UserService.loggedInUserName!</h3>

    <input type="text"
    class="form-control shadow-sm mt-3"
    placeholder="Filter by transaction type."
    @bind="searchTerm"
    @oninput="ApplySearch"   />

    <div class="row mt-5">
        <!-- Credit Card -->
        @if (string.IsNullOrEmpty(searchTerm) || searchTerm.Contains("Credit", StringComparison.OrdinalIgnoreCase))
        {
            <div class="col-md-4 mb-4">
                <div class="card text-white bg-success shadow-lg futuristic-card">
                    <div class="card-header text-center fw-bold">Credit</div>
                    <div class="card-body">
                        <h5 class="card-title text-center">Your Credit Balance</h5>
                        <p class="card-text text-center display-6">
                            @CurrentUser?.Credit.ToString("C", new CultureInfo("us-US"))
                        </p>
                        <button class="btn btn-outline-light mt-3" @onclick="ShowInputField">Add Credit</button>

                        @if (IsInputVisible)
                        {
                            <div class="mt-4">
                                <input type="number" class="form-control mb-3" @bind="NewCredit" placeholder="Enter credit amount">
                                <select class="form-select mb-3" @bind="Tag">
                                    <option>Select a tag</option>
                                    <option>Salary</option>
                                    <option>Others</option>
                                </select>
                                <input type="text" class="form-control mb-3" @bind="Note" placeholder="Remarks">
                                <button class="btn btn-primary" @onclick="SubmitCredit">Submit</button>
                                <button class="btn btn-secondary" @onclick="HideInputField">Cancel</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Debit Card -->
        @if (string.IsNullOrEmpty(searchTerm) || searchTerm.Contains("Debit", StringComparison.OrdinalIgnoreCase))
        {
            <div class="col-md-4 mb-4">
                <div class="card text-white bg-dark shadow-lg futuristic-card">
                    <div class="card-header text-center fw-bold">Debit</div>
                    <div class="card-body">
                        <h5 class="card-title text-center">Your Debit Balance</h5>
                        <p class="card-text text-center display-6">
                            @CurrentUser?.Debit.ToString("C", new CultureInfo("us-US"))
                        </p>
                        <button class="btn btn-outline-light mt-3" @onclick="ShowInputFieldDebit">Add Debit</button>

                        @if (IsInputVisibleDebit)
                        {
                            <div class="mt-4">
                                <input type="number" class="form-control mb-3" @bind="NewDebit" placeholder="Enter debit amount">
                                <select class="form-select mb-3" @bind="Tag">
                                    <option>Select a tag</option>
                                    <option>Groceries</option>
                                    <option>Rent</option>
                                    <option>Others</option>
                                </select>
                                <input type="text" class="form-control mb-3" @bind="Note" placeholder="Remarks">
                                <button class="btn btn-primary" @onclick="SubmitDebit">Submit</button>
                                <button class="btn btn-secondary" @onclick="HideInputFieldDebit">Cancel</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Debt Card -->
        @if (string.IsNullOrEmpty(searchTerm) || searchTerm.Contains("Debt", StringComparison.OrdinalIgnoreCase))
        {
            <div class="col-md-4 mb-4">
                <div class="card text-white bg-danger shadow-lg futuristic-card">
                    <div class="card-header text-center fw-bold">Debt</div>
                    <div class="card-body">
                        <h5 class="card-title text-center">Your Debt Balance</h5>
                        <p class="card-text text-center display-6">
                            @CurrentUser?.Debt.ToString("C", new CultureInfo("us-US"))
                        </p>
                        <button class="btn btn-outline-light mt-3" @onclick="ShowInputFieldDept">Add Debt</button>
                        <button class="btn btn-warning mt-3" @onclick="ClearDebtBalance">Clear Debt</button>

                        @if (IsInputVisibleDebt)
                        {
                            <div class="mt-4">
                                <input type="number" class="form-control mb-3" @bind="NewDebt" placeholder="Enter debt amount">
                                <button class="btn btn-primary" @onclick="SubmitDebt">Submit</button>
                                <button class="btn btn-secondary" @onclick="HideInputFieldDept">Cancel</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>


    @if (CurrentUser?.Debt > 0)
    {
        <div class="alert alert-warning text-center mt-3">
            <h4 class="fw-bold">You have <span class="text-danger">@CurrentUser.Debt</span> left to clear.</h4>
        </div>
    }
</div>

@code {
    private int NewCredit { get; set; }
    private int NewDebit { get; set; }
    private int NewDebt { get; set; }
    private bool IsInputVisible { get; set; } = false;
    private bool IsInputVisibleDebit { get; set; } = false;
    private bool IsInputVisibleDebt { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string Tag { get; set; }
    private string Note { get; set; }
    private string ErrorMessageDebit { get; set; } = string.Empty;
    private string ErrorMessageDebt { get; set; } = string.Empty;
    private User? CurrentUser { get; set; }
    private string searchTerm = string.Empty;

    protected override void OnInitialized()
    {
        CurrentUser = UserService.GetLoggedInUser();
    }

    private void ShowInputField() => IsInputVisible = true;
    private void ShowInputFieldDebit() => IsInputVisibleDebit = true;
    private void ShowInputFieldDept() => IsInputVisibleDebt = true;
    private void HideInputField() => IsInputVisible = false;
    private void HideInputFieldDebit() => IsInputVisibleDebit = false;
    private void HideInputFieldDept() => IsInputVisibleDebt = false;

    private void ApplySearch()
    {
        StateHasChanged();
    }

    private void SubmitCredit()
    {
        if (NewCredit > 0)
        {
            UserService.UpdateCredit(UserService.loggedInUserName, NewCredit, Tag, Note);
            CurrentUser = UserService.GetLoggedInUser();
            NewCredit = 0;
            IsInputVisible = false;
            ErrorMessage = string.Empty;
        }
        else
        {
            ErrorMessage = "Please enter credit amount in integer format and greater than 0.";
        }
    }

    private void SubmitDebit()
    {
        if (NewDebit > 0 && NewDebit <= CurrentUser.Credit)
        {
            UserService.UpdateDebit(UserService.loggedInUserName, NewDebit, Tag, Note);
            CurrentUser = UserService.GetLoggedInUser();
            NewDebit = 0;
            IsInputVisibleDebit = false;
            ErrorMessageDebit = string.Empty;
        }
        else
        {
            if(NewDebit > CurrentUser.Credit)
            {
                ErrorMessageDebit = "Your debit can't be greater than your credit";
            }
            else
            {
                ErrorMessageDebit = "Please enter debit amount in integer format and greater than 0.";
            }
        }
    }

    private void SubmitDebt()
    {
        if (NewDebt > 0)
        {
            UserService.UpdateDebt(UserService.loggedInUserName, NewDebt, Tag, Note);
            CurrentUser = UserService.GetLoggedInUser();
            NewDebt = 0;
            IsInputVisibleDebt = false;
            ErrorMessageDebit = string.Empty;
        }
        else
        {
            ErrorMessageDebit = "Please enter debt amount in integer format and greater than 0.";
        }
    }

    private void ClearDebtBalance()
    {
        try
        {
            UserService.ClearDebt(UserService.loggedInUserName);
            CurrentUser = UserService.GetLoggedInUser();
            ErrorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
