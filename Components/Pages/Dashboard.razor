@page "/dashboard"
@using practice.Models
@inject NavigationManager NavigationManager
@inject UserService UserService

<h3>Hi, @UserService.loggedInUserName!</h3>

<div class="row">
    <div class="col-12 mb-4">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-gradient text-light text-center" style="background: linear-gradient(90deg, #28a745, #218838);">
                <h5>Credit Box</h5>
            </div>
            <div class="card-body text-center">
                <h5 class="card-title">@UserService.loggedInUserName's Credit Balance</h5>
                <p class="card-text display-6 text-success fw-bold">@CurrentUser?.Credit</p>
                <button class="btn btn-outline-success mt-3" @onclick="ShowInputField">Insert Credit</button>

                @if (IsInputVisible)
                {
                    <div class="mt-4">
                        <input type="number" class="form-control mb-2 border-success" @bind="NewCredit" placeholder="Enter credit amount">
                        <button class="btn btn-success" @onclick="SubmitCredit">Insert</button>
                        <button class="btn btn-outline-secondary ms-2" @onclick="HideInputField">Discard</button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="text-danger mt-2">@ErrorMessage</div>
                }
            </div>
        </div>
    </div>

    <div class="col-12 mb-3">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-gradient text-light text-center" style="background: linear-gradient(90deg, #343a40, #212529);">
                <h5>Debit Box</h5>
            </div>
            <div class="card-body text-center">
                <h5 class="card-title">@UserService.loggedInUserName's Debit Balance</h5>
                <p class="card-text display-6 text-dark fw-bold">@CurrentUser?.Debit</p>
                <button class="btn btn-outline-dark mt-3" @onclick="ShowInputFieldDebit">Insert Debit</button>

                @if (IsInputVisibleDebit)
                {
                    <div class="mt-4">
                        <input type="number" class="form-control mb-2 border-dark" @bind="NewDebit" placeholder="Enter debit amount">
                        <button class="btn btn-dark" @onclick="SubmitDebit">Insert</button>
                        <button class="btn btn-outline-secondary ms-2" @onclick="HideInputFieldDebit">Discard</button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ErrorMessageDebit))
                {
                    <div class="text-danger mt-2">@ErrorMessageDebit</div>
                }
            </div>
        </div>
    </div>

    <div class="col-12 mb-3">
        <div class="card shadow-lg border-0">
            <div class="card-header bg-gradient text-light text-center" style="background: linear-gradient(90deg, #343a40, #212529);">
                Debt Box
            </div>
            <div class="card-body text-center">
                <h5 class="card-title">
                    @UserService.loggedInUserName's Debt Balance
                </h5>
                <p class="card-text display-6 text-danger fw-bold">@CurrentUser?.Debt</p>
                <button class="btn btn-outline-dark btn-sm mt-3" @onclick="ShowInputFieldDept" style="padding: 0.5rem 1rem;">
                    Insert Debt
                </button>

                @if (IsInputVisibleDebt)
                {
                    <div class="mt-4">
                        <input type="number" class="form-control form-control-sm mb-2"
                               @bind="NewDebt"
                               placeholder="Enter debt amount"
                               style="border: 1px solid #ff9999;">
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-primary btn-sm" @onclick="SubmitDebt" style="padding: 0.4rem 1rem;">
                                Insert
                            </button>
                            <button class="btn btn-secondary btn-sm" @onclick="HideInputFieldDept" style="padding: 0.4rem 1rem;">
                                Discard
                            </button>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ErrorMessageDebit))
                {
                    <div class="mt-2 text-danger" style="font-size: 0.9rem;">@ErrorMessageDebit</div>
                }
                <button class="btn btn-outline-dark btn-sm mt-4 ms-2" @onclick="ClearDebtBalance" style="padding: 0.5rem 1.5rem; font-weight: bold;">
                    Pay Debt
                </button>
            </div>
        </div>
    </div>

</div>



@code {
    private int NewCredit { get; set; }
    private int NewDebit { get; set; }
    private int NewDebt { get; set; }
    private bool IsInputVisible { get; set; } = false;
    private bool IsInputVisibleDebit { get; set; } = false;
    private bool IsInputVisibleDebt { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string ErrorMessageDebit { get; set; } = string.Empty;
    private string ErrorMessageDebt { get; set; } = string.Empty;
    private User? CurrentUser { get; set; }

    protected override void OnInitialized()
    {
        CurrentUser = UserService.GetLoggedInUser();
    }

    private void ShowInputField() => IsInputVisible = true;
    private void ShowInputFieldDebit() => IsInputVisibleDebit = true;
    private void ShowInputFieldDept() => IsInputVisibleDebt = true;
    private void HideInputField() => IsInputVisible = false;
    private void HideInputFieldDebit() => IsInputVisibleDebit = false;
    private void HideInputFieldDept() => IsInputVisibleDebt = false;

    private void SubmitCredit()
    {
        if (NewCredit > 0)
        {
            UserService.UpdateCredit(UserService.loggedInUserName, NewCredit);
            CurrentUser = UserService.GetLoggedInUser(); 
            NewCredit = 0;
            IsInputVisible = false;
            ErrorMessage = string.Empty;
        }
        else
        {
            ErrorMessage = "Please enter credit amount in integer format";
        }
    }

    private void SubmitDebit()
    {
        if (NewDebit > 0)
        {
            UserService.UpdateDebit(UserService.loggedInUserName, NewDebit);
            CurrentUser = UserService.GetLoggedInUser();
            NewDebit = 0;
            IsInputVisibleDebit = false;
            ErrorMessageDebit = string.Empty;
        }
        else
        {
            ErrorMessageDebit = "Please enter debit amount in integer format.";
        }
    }

    private void SubmitDebt()
    {
        if(NewDebt > 0)
        {
            UserService.UpdateDebt(UserService.loggedInUserName, NewDebt);
            CurrentUser = UserService.GetLoggedInUser();
            NewDebt = 0;
            IsInputVisibleDebt = false;
            ErrorMessageDebit = string.Empty;
        }
        else
        {
            ErrorMessageDebit = "Please enter debt amount in integer format.";
        }
    }


    private void ClearDebtBalance()
    {
        try
        {
            UserService.ClearDebt(UserService.loggedInUserName);
            CurrentUser = UserService.GetLoggedInUser();
            ErrorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    
}
