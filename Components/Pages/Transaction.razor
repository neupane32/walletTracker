@page "/transaction"
@using practice.Models
@inject UserService UserService

<h3>Transaction History</h3>

<div class="row">
    <div class="col-md-6">
        <input type="text"
               class="form-control"
               placeholder="Search by Description"
               @bind="searchTerm"
               @oninput="ApplySearch" 
               @onkeypress="HandleKeyPress"/>
    </div>
</div>

@if (filteredTransactions?.Count > 0)
{
    <table class="table table-bordered table-hover table-sm mt-3" style="box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); border-radius: 8px; overflow: hidden;">
        <thead class="thead-dark" style="background-color: #343a40; color: white;">
            <tr>
                <th>Transaction Id</th>
                <th>
                    <button class="btn btn-link text-white p-0" style="text-decoration: none;" @onclick="SortByDate">
                        Transaction Date
                        @if (isDateSortedAscending)
                        {
                            <span>&uarr;</span>
                        }
                        else
                        {
                            <span>&darr;</span>
                        }
                    </button>
                </th>
                <th>Transaction Type</th>
                <th>Transaction Amount</th>
                <th>Transaction Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Description</td>
                </tr>
            }
        </tbody>
    </table>

}
else
{
    <p>No transcations yet.</p>
}

<button class="btn btn-danger mt-3" @onclick="ClearTransactionHistory">Delete History</button>

@code {
    private List<practice.Models.Transaction> Transactions = new();
    private List<practice.Models.Transaction> filteredTransactions = new();
    private string searchTerm = string.Empty;
    private bool isDateSortedAscending = true;

    protected override void OnInitialized()
    {
        var username = UserService.loggedInUserName;

        if (!string.IsNullOrEmpty(username))
        {
            Transactions = UserService.GetUserTransactions(username);
            filteredTransactions = new List<practice.Models.Transaction>(Transactions);
        }
    }

    private void SortByDate()
    {
        if (isDateSortedAscending)
        {
            filteredTransactions = filteredTransactions.OrderByDescending(t => t.Date).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderBy(t => t.Date).ToList();
        }
        isDateSortedAscending = !isDateSortedAscending;
    }

    private void ApplySearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTransactions = new List<practice.Models.Transaction>(Transactions);
        }
        else
        {
            filteredTransactions = Transactions
                .Where(t => t.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplySearch();
        }
    }

    private void ClearTransactionHistory()
    {
        var username = UserService.loggedInUserName;
        if (!string.IsNullOrEmpty(username))
        {
            UserService.ClearTransaction(username);
            Transactions.Clear();
            filteredTransactions.Clear();
        }
    }
}
