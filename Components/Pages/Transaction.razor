@page "/transaction"
@using practice.Models
@using System.Globalization
@inject UserService UserService
@inject IJSRuntime JSRuntime

<h3 class="text-center mt-4">Transaction History</h3>

<div class="container mt-4">
    <div class="row mb-3">
        <!-- Search by Description -->
        <div class="col-md-3">
            <input type="text" class="form-control" placeholder="Search by Description" @bind="searchTerm" @oninput="ApplySearch" />
        </div>

        <!-- Filter by Type -->
        <div class="col-md-3">
            <label for="typeFilter">Filter by Type:</label>
            <select id="typeFilter" class="form-select" @onchange="FilterByType">
                <option value="">All</option>
                <option value="Credit">Credit</option>
                <option value="Debit">Debit</option>
            </select>
        </div>

        <!-- Filter by Tag -->
        <div class="col-md-3">
            <label for="tagFilter">Filter by Tag:</label>
            <select id="tagFilter" class="form-select" @onchange="FilterByTag">
                <option value="">All</option>
                <option value="Personal">Personal</option>
                <option value="Business">Business</option>
                <option value="Loan">Loan</option>
                <option value="Investment">Investment</option>
                <option value="Salary">Salary</option>
                <option value="Miscellaneous">Miscellaneous</option>
            </select>
        </div>
    </div>

    <button class="btn btn-secondary" @onclick="downloadTable">Download Table in pdf</button>
    <button class="btn btn-secondary" @onclick="DownloadTableAsExcel">Download Table in excel</button>


    @if (filteredTransactions?.Count > 0)
    {
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Transaction Id</th>
                    <th>
                        <button class="btn btn-link text-light p-0" style="text-decoration: none;" @onclick="SortByDate">
                            Transaction Date
                            @if (isDateSortedAscending)
                            {
                                <span>&uarr;</span>
                            }
                            else
                            {
                                <span>&darr;</span>
                            }
                        </button>
                    </th>
                    <th>Transaction Type</th>
                    <th>Transaction Amount</th>
                    <th>Transaction Description</th>
                    <th>Tag</th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in filteredTransactions)
                {
                    <tr>
                        <td>@(++id)</td>
                        <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@transaction.Type</td>
                        <td>@transaction.Amount.ToString("C", new CultureInfo("us-US"))</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Tag</td>
                        <td>@transaction.Note</td>
                    </tr>
                }
            </tbody>
        </table>

        <p class="text-center mt-3">Total number of transactions: <b>@filteredTransactions.Count()</b></p>
    }
    else
    {
        <div class="alert alert-info text-center" role="alert">
            No transactions found.
        </div>
    }

    <button class="btn btn-danger mt-3" @onclick="ClearTransactionHistory">Delete History</button>

    <h4 class="mt-5">Highest Transactions</h4>
    <table class="table table-striped table-hover mt-3">
        <thead class="table-dark">
            <tr>
                <th>Transaction Id</th>
                <th>Transaction Date</th>
                <th>Transaction Type</th>
                <th>Transaction Amount</th>
                <th>Transaction Description</th>
                <th>Tag</th>
                <th>Remarks</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions.Where(Transaction => Transaction.Amount > 10000))
            {
                <tr>
                    <td>@(++id)</td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Amount.ToString("C", new CultureInfo("us-US"))</td>
                    <td>@transaction.Description</td>
                    <td>@transaction.Tag</td>
                    <td>@transaction.Note</td>
                </tr>
            }
        </tbody>
    </table>

    <h4 class="mt-5">Lowest Transactions</h4>
    <table class="table table-striped table-hover mt-3">
        <thead class="table-dark">
            <tr>
                <th>Transaction Id</th>
                <th>Transaction Date</th>
                <th>Transaction Type</th>
                <th>Transaction Amount</th>
                <th>Transaction Description</th>
                <th>Tag</th>
                <th>Remarks</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions.Where(Transaction => Transaction.Amount < 500))
            {
                <tr>
                    <td>@(++id)</td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Amount.ToString("C", new CultureInfo("us-US"))</td>
                    <td>@transaction.Description</td>
                    <td>@transaction.Tag</td>
                    <td>@transaction.Note</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<practice.Models.Transaction> Transactions = new();
    private List<practice.Models.Transaction> filteredTransactions = new();
    private string searchTerm = string.Empty;
    private string selectedType = string.Empty;
    private string selectedTag = string.Empty;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool isDateSortedAscending = true;
    private int id { get; set; } = 0;

    protected override void OnInitialized()
    {
        var username = UserService.loggedInUserName;

        if (!string.IsNullOrEmpty(username))
        {
            Transactions = UserService.GetUserTransactions(username);
            filteredTransactions = new List<practice.Models.Transaction>(Transactions);
        }
    }

    private async Task downloadTable()
    {
        var transactions = UserService.GetUserTransactions(UserService.loggedInUserName);

        var transactionData = transactions.Select(t => new
        {
            id = t.Id,
            date = t.Date.ToString("yyyy-MM-dd HH:mm:ss"),
            amount = t.Amount,
            type = t.Type,
            description = t.Description,
            tag = t.Tag,
            remarks = t.Note
        }).ToList();
        try
        {
            await JSRuntime.InvokeVoidAsync("generatePDFWithBlob", transactionData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling JavaScript: {ex.Message}");
        }

    }

    private async Task DownloadTableAsExcel()
    {
        var transactions = UserService.GetUserTransactions(UserService.loggedInUserName);

        var transactionData = transactions.Select(t => new
        {
            Id = t.Id,
            Date = t.Date.ToString("yyyy-MM-dd HH:mm:ss"),
            Amount = t.Amount,
            Type = t.Type,
            Tag = t.Tag,
            Remarks = t.Note
        }).ToList();

        await JSRuntime.InvokeVoidAsync("generateExcel", transactionData);
    }


    private void SortByDate()
    {
        if (isDateSortedAscending)
        {
            filteredTransactions = filteredTransactions.OrderByDescending(t => t.Date).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderBy(t => t.Date).ToList();
        }
        isDateSortedAscending = !isDateSortedAscending;
    }

    private void ApplySearch()
    {
        FilterTransactions();
    }

    private void FilterByType(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? string.Empty;
        FilterTransactions();
    }

    private void FilterByTag(ChangeEventArgs e)
    {
        selectedTag = e.Value?.ToString() ?? string.Empty;
        FilterTransactions();
    }

    private void FilterTransactions()
    {
        filteredTransactions = Transactions
            .Where(t => (string.IsNullOrEmpty(searchTerm) || (t.Description != null && t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))) &&
                        (string.IsNullOrEmpty(selectedType) || (t.Type != null && t.Type.Equals(selectedType, StringComparison.OrdinalIgnoreCase))) &&
                        (string.IsNullOrEmpty(selectedTag) || (t.Tag != null && t.Tag.Equals(selectedTag, StringComparison.OrdinalIgnoreCase))))
            .ToList();
    }

    private void ClearTransactionHistory()
    {
        var username = UserService.loggedInUserName;
        if (!string.IsNullOrEmpty(username))
        {
            UserService.ClearTransaction(username);
            Transactions.Clear();
            filteredTransactions.Clear();
        }
    }
}
